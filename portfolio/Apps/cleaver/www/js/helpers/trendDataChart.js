angular
    .module('cleverbaby.helpers')
    .factory("TrendDataChart", ["$rootScope", function($rootScope){


        function getWhoData(){
            return {
                'm':{
                    'bmi':{
                        '13weeks':[
                            '11.3 12.2 13.4 14.8 16.1',
                            '11.0 12.0 13.3 14.7 15.9',
                            '11.3 12.3 13.6 15.0 16.2',
                            '11.9 12.9 14.2 15.6 16.8',
                            '12.4 13.4 14.8 16.2 17.4',
                            '12.8 13.9 15.2 16.7 18.0',
                            '13.2 14.2 15.6 17.1 18.4',
                            '13.5 14.5 15.9 17.4 18.7',
                            '13.7 14.8 16.2 17.7 19.0',
                            '13.9 15.0 16.4 17.9 19.3',
                            '14.1 15.1 16.5 18.1 19.4',
                            '14.2 15.3 16.7 18.2 19.6',
                            '14.3 15.4 16.8 18.4 19.7',
                            '14.4 15.5 16.9 18.4 19.8',
                        ],
                        '0to5years':[
                            '11.3 12.2 13.4 14.8 16.1',
                            '12.6 13.6 14.9 16.4 17.6',
                            '13.8 14.9 16.3 17.8 19.2',
                            '14.4 15.5 16.9 18.5 19.8',
                            '14.7 15.7 17.2 18.7 20.1',
                            '14.8 15.9 17.3 18.9 20.2',
                            '14.9 15.9 17.3 18.9 20.3',
                            '14.9 15.9 17.3 18.9 20.3',
                            '14.9 15.9 17.3 18.8 20.2',
                            '14.8 15.8 17.2 18.7 20.1',
                            '14.7 15.7 17.0 18.6 19.9',
                            '14.6 15.6 16.9 18.4 19.8',
                            '14.5 15.5 16.8 18.3 19.6',
                            '14.4 15.4 16.7 18.1 19.5',
                            '14.3 15.3 16.6 18.0 19.3',
                            '14.2 15.2 16.4 17.9 19.2',
                            '14.2 15.1 16.3 17.8 19.1',
                            '14.1 15.0 16.2 17.6 18.9',
                            '14.0 14.9 16.1 17.5 18.8',
                            '13.9 14.8 16.1 17.4 18.7',
                            '13.9 14.8 16.0 17.4 18.6',
                            '13.8 14.7 15.9 17.3 18.6',
                            '13.8 14.6 15.8 17.2 18.5',
                            '13.7 14.6 15.8 17.1 18.4',
                            '13.9 14.8 16.0 17.4 18.7',
                            '13.9 14.8 16.0 17.4 18.6',
                            '13.8 14.7 15.9 17.3 18.6',
                            '13.8 14.7 15.9 17.3 18.5',
                            '13.8 14.7 15.9 17.2 18.5',
                            '13.7 14.6 15.8 17.2 18.4',
                            '13.7 14.6 15.8 17.2 18.4',
                            '13.7 14.5 15.8 17.1 18.4',
                            '13.6 14.5 15.7 17.1 18.3',
                            '13.6 14.5 15.7 17.0 18.3',
                            '13.5 14.4 15.7 17.0 18.2',
                            '13.5 14.4 15.6 17.0 18.2',
                            '13.5 14.4 15.6 17.0 18.2',
                            '13.5 14.4 15.6 16.9 18.1',
                            '13.4 14.3 15.5 16.9 18.1',
                            '13.4 14.3 15.5 16.9 18.1',
                            '13.4 14.3 15.5 16.8 18.1',
                            '13.3 14.2 15.5 16.8 18.0',
                            '13.3 14.2 15.4 16.8 18.0',
                            '13.3 14.2 15.4 16.8 18.0',
                            '13.3 14.2 15.4 16.8 18.0',
                            '13.2 14.2 15.4 16.8 18.0',
                            '13.2 14.1 15.4 16.7 18.0',
                            '13.2 14.1 15.3 16.7 18.0',
                            '13.2 14.1 15.3 16.7 18.0',
                            '13.2 14.1 15.3 16.7 18.0',
                            '13.2 14.1 15.3 16.7 18.0',
                            '13.1 14.0 15.3 16.7 18.0',
                            '13.1 14.0 15.3 16.7 18.0',
                            '13.1 14.0 15.3 16.7 18.0',
                            '13.1 14.0 15.3 16.7 18.0',
                            '13.1 14.0 15.2 16.7 18.0',
                            '13.1 14.0 15.2 16.7 18.0',
                            '13.0 14.0 15.2 16.7 18.0',
                            '13.0 13.9 15.2 16.7 18.0',
                            '13.0 13.9 15.2 16.7 18.1',
                            '13.0 13.9 15.2 16.7 18.1',
                        ]
                    },
                    'headCircumference':{
                        '13weeks':[
                            '32.1 33.1 34.5 35.8 36.9',
                            '32.9 33.9 35.2 36.4 37.5',
                            '33.7 34.7 35.9 37.1 38.1',
                            '34.3 35.3 36.5 37.7 38.7',
                            '34.9 35.9 37.1 38.3 39.3',
                            '35.4 36.4 37.6 38.8 39.8',
                            '35.9 36.8 38.1 39.3 40.3',
                            '36.3 37.3 38.5 39.7 40.7',
                            '36.7 37.7 38.9 40.1 41.1',
                            '37.0 38.0 39.2 40.5 41.4',
                            '37.4 38.4 39.6 40.8 41.8',
                            '37.7 38.7 39.9 41.1 42.1',
                            '38.0 39.0 40.2 41.4 42.4',
                            '38.3 39.3 40.5 41.7 42.7',
                        ],
                        '0to5years':[
                            '32.1 33.1 34.5 35.8 36.9',
                            '35.1 36.1 37.3 38.5 39.5',
                            '36.9 37.9 39.1 40.3 41.3',
                            '38.3 39.3 40.5 41.7 42.7',
                            '39.4 40.4 41.6 42.9 43.9',
                            '40.3 41.3 42.6 43.8 44.8',
                            '41.0 42.1 43.3 44.6 45.6',
                            '41.7 42.7 44.0 45.3 46.3',
                            '42.2 43.2 44.5 45.8 46.9',
                            '42.6 43.7 45.0 46.3 47.4',
                            '43.0 44.1 45.4 46.7 47.8',
                            '43.4 44.4 45.8 47.1 48.2',
                            '43.6 44.7 46.1 47.4 48.5',
                            '43.9 45.0 46.3 47.7 48.8',
                            '44.1 45.2 46.6 47.9 49.0',
                            '44.3 45.5 46.8 48.2 49.3',
                            '44.5 45.6 47.0 48.4 49.5',
                            '44.7 45.8 47.2 48.6 49.7',
                            '44.9 46.0 47.4 48.7 49.9',
                            '45.0 46.2 47.5 48.9 50.0',
                            '45.2 46.3 47.7 49.1 50.2',
                            '45.3 46.4 47.8 49.2 50.4',
                            '45.4 46.6 48.0 49.4 50.5',
                            '45.6 46.7 48.1 49.5 50.7',
                            '45.7 46.8 48.3 49.7 50.8',
                            '45.8 47.0 48.4 49.8 50.9',
                            '45.9 47.1 48.5 49.9 51.1',
                            '46.0 47.2 48.6 50.0 51.2',
                            '46.1 47.3 48.7 50.2 51.3',
                            '46.2 47.4 48.8 50.3 51.4',
                            '46.3 47.5 48.9 50.4 51.6',
                            '46.4 47.6 49.0 50.5 51.7',
                            '46.5 47.7 49.1 50.6 51.8',
                            '46.6 47.8 49.2 50.7 51.9',
                            '46.6 47.8 49.3 50.8 52.0',
                            '46.7 47.9 49.4 50.8 52.0',
                            '46.8 48.0 49.5 50.9 52.1',
                            '46.9 48.1 49.5 51.0 52.2',
                            '46.9 48.1 49.6 51.1 52.3',
                            '47.0 48.2 49.7 51.2 52.4',
                            '47.0 48.3 49.7 51.2 52.4',
                            '47.1 48.3 49.8 51.3 52.5',
                            '47.2 48.4 49.9 51.4 52.6',
                            '47.2 48.4 49.9 51.4 52.7',
                            '47.3 48.5 50.0 51.5 52.7',
                            '47.3 48.5 50.1 51.6 52.8',
                            '47.4 48.6 50.1 51.6 52.8',
                            '47.4 48.6 50.2 51.7 52.9',
                            '47.5 48.7 50.2 51.7 53.0',
                            '47.5 48.7 50.3 51.8 53.0',
                            '47.5 48.8 50.3 51.8 53.1',
                            '47.6 48.8 50.4 51.9 53.1',
                            '47.6 48.9 50.4 51.9 53.2',
                            '47.7 48.9 50.4 52.0 53.2',
                            '47.7 49.0 50.5 52.0 53.3',
                            '47.7 49.0 50.5 52.1 53.3',
                            '47.8 49.0 50.6 52.1 53.4',
                            '47.8 49.1 50.6 52.2 53.4',
                            '47.9 49.1 50.7 52.2 53.5',
                            '47.9 49.2 50.7 52.2 53.5',
                            '47.9 49.2 50.7 52.3 53.5',
                        ]
                    },
                    'length':{
                        '13weeks':[
                            '46.3 47.9 49.9 51.8 53.4',
                            '47.5 49.1 51.1 53.1 54.7',
                            '48.8 50.4 52.3 54.3 55.9',
                            '49.8 51.4 53.4 55.4 57.0',
                            '50.7 52.4 54.4 56.4 58.0',
                            '51.7 53.3 55.3 57.4 59.0',
                            '52.5 54.2 56.2 58.3 59.9',
                            '53.4 55.0 57.1 59.1 60.8',
                            '54.1 55.8 57.9 60.0 61.6',
                            '54.9 56.6 58.7 60.7 62.4',
                            '55.6 57.3 59.4 61.5 63.2',
                            '56.3 58.0 60.1 62.2 63.9',
                            '56.9 58.7 60.8 62.9 64.6',
                            '57.6 59.3 61.4 63.5 65.2'
                        ],

                        '0to5years':[
                            '46.3 47.9 49.9 51.8 53.4',
                            '51.1 52.7 54.7 56.7 58.4',
                            '54.7 56.4 58.4 60.5 62.2',
                            '57.6 59.3 61.4 63.5 65.3',
                            '60.0 61.7 63.9 66.0 67.8',
                            '61.9 63.7 65.9 68.1 69.9',
                            '63.6 65.4 67.6 69.8 71.6',
                            '65.1 66.9 69.2 71.4 73.2',
                            '66.5 68.3 70.6 72.9 74.7',
                            '67.7 69.6 72.0 74.3 76.2',
                            '69.0 70.9 73.3 75.6 77.6',
                            '70.2 72.1 74.5 77.0 78.9',
                            '71.3 73.3 75.7 78.2 80.2',
                            '72.4 74.4 76.9 79.4 81.5',
                            '73.4 75.5 78.0 80.6 82.7',
                            '74.4 76.5 79.1 81.8 83.9',
                            '75.4 77.5 80.2 82.9 85.1',
                            '76.3 78.5 81.2 84.0 86.2',
                            '77.2 79.5 82.3 85.1 87.3',
                            '78.1 80.4 83.2 86.1 88.4',
                            '78.9 81.3 84.2 87.1 89.5',
                            '79.7 82.2 85.1 88.1 90.5',
                            '80.5 83.0 86.0 89.1 91.6',
                            '81.3 83.8 86.9 90.0 92.6',
                            '81.4 83.9 87.1 90.3 92.9',
                            '82.1 84.7 88.0 91.2 93.8',
                            '82.8 85.5 88.8 92.1 94.8',
                            '83.5 86.3 89.6 93.0 95.7',
                            '84.2 87.0 90.4 93.8 96.6',
                            '84.9 87.7 91.2 94.7 97.5',
                            '85.5 88.4 91.9 95.5 98.3',
                            '86.2 89.1 92.7 96.2 99.2',
                            '86.8 89.7 93.4 97.0 100.0',
                            '87.4 90.4 94.1 97.8 100.8',
                            '88.0 91.0 94.8 98.5 101.5',
                            '88.5 91.6 95.4 99.2 102.3',
                            '89.1 92.2 96.1 99.9 103.1',
                            '89.7 92.8 96.7 100.6 103.8',
                            '90.2 93.4 97.4 101.3 104.5',
                            '90.8 94.0 98.0 102.0 105.2',
                            '91.3 94.6 98.6 102.7 105.9',
                            '91.9 95.2 99.2 103.3 106.6',
                            '92.4 95.7 99.9 104.0 107.3',
                            '92.9 96.3 100.4 104.6 108.0',
                            '93.4 96.8 101.0 105.2 108.6',
                            '93.9 97.4 101.6 105.8 109.3',
                            '94.4 97.9 102.2 106.5 109.9',
                            '94.9 98.5 102.8 107.1 110.6',
                            '95.4 99.0 103.3 107.7 111.2',
                            '95.9 99.5 103.9 108.3 111.8',
                            '96.4 100.0 104.4 108.9 112.5',
                            '96.9 100.5 105.0 109.5 113.1 '
                        ],

                        'to2years': [
                            '46.3 47.9 49.9 51.8 53.4',
                            '51.1 52.7 54.7 56.7 58.4',
                            '54.7 56.4 58.4 60.5 62.2',
                            '57.6 59.3 61.4 63.5 65.3',
                            '60.0 61.7 63.9 66.0 67.8',
                            '61.9 63.7 65.9 68.1 69.9',
                            '63.6 65.4 67.6 69.8 71.6',
                            '65.1 66.9 69.2 71.4 73.2',
                            '66.5 68.3 70.6 72.9 74.7',
                            '67.7 69.6 72.0 74.3 76.2',
                            '69.0 70.9 73.3 75.6 77.6',
                            '70.2 72.1 74.5 77.0 78.9',
                            '71.3 73.3 75.7 78.2 80.2',
                            '72.4 74.4 76.9 79.4 81.5',
                            '73.4 75.5 78.0 80.6 82.7',
                            '74.4 76.5 79.1 81.8 83.9',
                            '75.4 77.5 80.2 82.9 85.1',
                            '76.3 78.5 81.2 84.0 86.2',
                            '77.2 79.5 82.3 85.1 87.3',
                            '78.1 80.4 83.2 86.1 88.4',
                            '78.9 81.3 84.2 87.1 89.5',
                            '79.7 82.2 85.1 88.1 90.5',
                            '80.5 83.0 86.0 89.1 91.6',
                            '81.3 83.8 86.9 90.0 92.6',
                            '82.1 84.6 87.8 91.0 93.6 '
                        ],

                        '2to5years':[
                            '81.4 83.9 87.1 90.3 92.9',
                            '82.1 84.7 88.0 91.2 93.8',
                            '82.8 85.5 88.8 92.1 94.8',
                            '83.5 86.3 89.6 93.0 95.7',
                            '84.2 87.0 90.4 93.8 96.6',
                            '84.9 87.7 91.2 94.7 97.5',
                            '85.5 88.4 91.9 95.5 98.3',
                            '86.2 89.1 92.7 96.2 99.2',
                            '86.8 89.7 93.4 97.0 100.0',
                            '87.4 90.4 94.1 97.8 100.8',
                            '88.0 91.0 94.8 98.5 101.5',
                            '88.5 91.6 95.4 99.2 102.3',
                            '89.1 92.2 96.1 99.9 103.1',
                            '89.7 92.8 96.7 100.6 103.8',
                            '90.2 93.4 97.4 101.3 104.5',
                            '90.8 94.0 98.0 102.0 105.2',
                            '91.3 94.6 98.6 102.7 105.9',
                            '91.9 95.2 99.2 103.3 106.6',
                            '92.4 95.7 99.9 104.0 107.3',
                            '92.9 96.3 100.4 104.6 108.0',
                            '93.4 96.8 101.0 105.2 108.6',
                            '93.9 97.4 101.6 105.8 109.3',
                            '94.4 97.9 102.2 106.5 109.9',
                            '94.9 98.5 102.8 107.1 110.6',
                            '95.4 99.0 103.3 107.7 111.2',
                            '95.9 99.5 103.9 108.3 111.8',
                            '96.4 100.0 104.4 108.9 112.5',
                            '96.9 100.5 105.0 109.5 113.1 '
                        ]
                    },

                    'weight':{
                        '13weeks':[
                            '2.5 2.9 3.3 3.9 4.3',
                            '2.6 3.0 3.5 4.0 4.5',
                            '2.8 3.2 3.8 4.3 4.9',
                            '3.1 3.5 4.1 4.7 5.2',
                            '3.4 3.8 4.4 5.0 5.6',
                            '3.6 4.1 4.7 5.3 5.9',
                            '3.8 4.3 4.9 5.6 6.3',
                            '4.1 4.5 5.2 5.9 6.5',
                            '4.3 4.7 5.4 6.2 6.8',
                            '4.4 4.9 5.6 6.4 7.1',
                            '4.6 5.1 5.8 6.6 7.3',
                            '4.8 5.3 6.0 6.8 7.5',
                            '4.9 5.5 6.2 7.0 7.7',
                            '5.1 5.6 6.4 7.2 7.9',
                        ],

                        '0to5years':[
                            '2.5 2.9 3.3 3.9 4.3',
                            '3.4 3.9 4.5 5.1 5.7',
                            '4.4 4.9 5.6 6.3 7.0',
                            '5.1 5.6 6.4 7.2 7.9',
                            '5.6 6.2 7.0 7.9 8.6',
                            '6.1 6.7 7.5 8.4 9.2',
                            '6.4 7.1 7.9 8.9 9.7',
                            '6.7 7.4 8.3 9.3 10.2',
                            '7.0 7.7 8.6 9.6 10.5',
                            '7.2 7.9 8.9 10.0 10.9',
                            '7.5 8.2 9.2 10.3 11.2',
                            '7.7 8.4 9.4 10.5 11.5',
                            '7.8 8.6 9.6 10.8 11.8',
                            '8.0 8.8 9.9 11.1 12.1',
                            '8.2 9.0 10.1 11.3 12.4',
                            '8.4 9.2 10.3 11.6 12.7',
                            '8.5 9.4 10.5 11.8 12.9',
                            '8.7 9.6 10.7 12.0 13.2',
                            '8.9 9.7 10.9 12.3 13.5',
                            '9.0 9.9 11.1 12.5 13.7',
                            '9.2 10.1 11.3 12.7 14.0',
                            '9.3 10.3 11.5 13.0 14.3',
                            '9.5 10.5 11.8 13.2 14.5',
                            '9.7 10.6 12.0 13.4 14.8',
                            '9.8 10.8 12.2 13.7 15.1',
                            '10.0 11.0 12.4 13.9 15.3',
                            '10.1 11.1 12.5 14.1 15.6',
                            '10.2 11.3 12.7 14.4 15.9',
                            '10.4 11.5 12.9 14.6 16.1',
                            '10.5 11.6 13.1 14.8 16.4',
                        ]

                    }
                },
                'f':{
                    'bmi':{
                        '13weeks':[
                            '11.2 12.1 13.3 14.7 15.9',
                            '10.8 11.9 13.2 14.6 15.8',
                            '11.1 12.1 13.5 14.8 16.0',
                            '11.5 12.6 14.0 15.4 16.6',
                            '12.0 13.0 14.4 15.9 17.2',
                            '12.3 13.4 14.8 16.3 17.6',
                            '12.6 13.7 15.1 16.7 18.0',
                            '12.9 14.0 15.4 17.0 18.3',
                            '13.1 14.2 15.6 17.2 18.6',
                            '13.2 14.3 15.8 17.4 18.8',
                            '13.4 14.5 16.0 17.6 19.0',
                            '13.5 14.6 16.1 17.8 19.2',
                            '13.6 14.8 16.2 17.9 19.3',
                            '13.7 14.9 16.4 18.0 19.4',
                        ],
                        '0to5years':[
                            '11.2 12.1 13.3 14.7 15.9',
                            '12.1 13.2 14.6 16.1 17.3',
                            '13.2 14.3 15.8 17.4 18.8',
                            '13.7 14.9 16.4 18.0 19.4',
                            '14.0 15.2 16.7 18.3 19.8',
                            '14.2 15.3 16.8 18.5 20.0',
                            '14.3 15.4 16.9 18.6 20.1',
                            '14.3 15.4 16.9 18.6 20.1',
                            '14.3 15.4 16.8 18.5 20.0',
                            '14.2 15.3 16.7 18.4 19.9',
                            '14.1 15.2 16.6 18.2 19.7',
                            '14.0 15.1 16.5 18.1 19.6',
                            '13.9 15.0 16.4 17.9 19.4',
                            '13.8 14.8 16.2 17.8 19.2',
                            '13.7 14.7 16.1 17.7 19.1',
                            '13.7 14.6 16.0 17.5 19.0',
                            '13.6 14.6 15.9 17.4 18.8',
                            '13.5 14.5 15.8 17.3 18.7',
                            '13.4 14.4 15.7 17.2 18.6',
                            '13.4 14.3 15.7 17.2 18.5',
                            '13.3 14.3 15.6 17.1 18.5',
                            '13.3 14.2 15.5 17.0 18.4',
                            '13.3 14.2 15.5 17.0 18.3',
                            '13.2 14.2 15.4 16.9 18.3',
                            '13.5 14.4 15.7 17.2 18.5',
                            '13.4 14.4 15.7 17.1 18.5',
                            '13.4 14.4 15.6 17.1 18.5',
                            '13.4 14.3 15.6 17.1 18.4',
                            '13.4 14.3 15.6 17.0 18.4',
                            '13.4 14.3 15.6 17.0 18.4',
                            '13.3 14.3 15.5 17.0 18.3',
                            '13.3 14.2 15.5 17.0 18.3',
                            '13.3 14.2 15.5 16.9 18.3',
                            '13.3 14.2 15.5 16.9 18.3',
                            '13.2 14.2 15.4 16.9 18.2',
                            '13.2 14.1 15.4 16.9 18.2',
                            '13.2 14.1 15.4 16.9 18.2',
                            '13.2 14.1 15.4 16.8 18.2',
                            '13.2 14.1 15.4 16.8 18.2',
                            '13.1 14.1 15.3 16.8 18.2',
                            '13.1 14.0 15.3 16.8 18.2',
                            '13.1 14.0 15.3 16.8 18.2',
                            '13.1 14.0 15.3 16.8 18.2',
                            '13.0 14.0 15.3 16.8 18.2',
                            '13.0 14.0 15.3 16.8 18.2',
                            '13.0 14.0 15.3 16.8 18.3',
                            '13.0 13.9 15.3 16.8 18.3',
                            '13.0 13.9 15.3 16.8 18.3',
                            '12.9 13.9 15.3 16.8 18.3',
                            '12.9 13.9 15.3 16.8 18.3',
                            '12.9 13.9 15.3 16.8 18.3',
                            '12.9 13.9 15.3 16.8 18.4',
                            '12.9 13.9 15.2 16.9 18.4',
                            '12.9 13.9 15.3 16.9 18.4',
                            '12.9 13.9 15.3 16.9 18.4',
                            '12.9 13.9 15.3 16.9 18.4',
                            '12.8 13.8 15.3 16.9 18.5',
                            '12.8 13.8 15.3 16.9 18.5',
                            '12.8 13.8 15.3 16.9 18.5',
                            '12.8 13.8 15.3 16.9 18.5',
                            '12.8 13.8 15.3 17.0 18.6',
                        ]
                    },
                    'headCircumference':{
                        '13weeks':[
                            '31.7 32.7 33.9 35.1 36.1',
                            '32.4 33.3 34.6 35.8 36.7',
                            '33.1 34.0 35.2 36.4 37.4',
                            '33.7 34.6 35.8 37.0 38.0',
                            '34.2 35.2 36.4 37.6 38.6',
                            '34.6 35.6 36.8 38.1 39.1',
                            '35.0 36.0 37.3 38.5 39.5',
                            '35.4 36.4 37.7 38.9 39.9',
                            '35.7 36.8 38.0 39.3 40.3',
                            '36.1 37.1 38.4 39.6 40.6',
                            '36.4 37.4 38.7 39.9 41.0',
                            '36.7 37.7 39.0 40.2 41.3',
                            '36.9 38.0 39.3 40.5 41.6',
                            '37.2 38.2 39.5 40.8 41.9',
                        ],
                        '0to5years':[
                            '31.7 32.7 33.9 35.1 36.1',
                            '34.3 35.3 36.5 37.8 38.8',
                            '36.0 37.0 38.3 39.5 40.5',
                            '37.2 38.2 39.5 40.8 41.9',
                            '38.2 39.3 40.6 41.9 43.0',
                            '39.0 40.1 41.5 42.8 43.9',
                            '39.7 40.8 42.2 43.5 44.6',
                            '40.4 41.5 42.8 44.2 45.3',
                            '40.9 42.0 43.4 44.7 45.9',
                            '41.3 42.4 43.8 45.2 46.3',
                            '41.7 42.8 44.2 45.6 46.8',
                            '42.0 43.2 44.6 46.0 47.1',
                            '42.3 43.5 44.9 46.3 47.5',
                            '42.6 43.8 45.2 46.6 47.7',
                            '42.9 44.0 45.4 46.8 48.0',
                            '43.1 44.2 45.7 47.1 48.2',
                            '43.3 44.4 45.9 47.3 48.5',
                            '43.5 44.6 46.1 47.5 48.7',
                            '43.6 44.8 46.2 47.7 48.8',
                            '43.8 45.0 46.4 47.8 49.0',
                            '44.0 45.1 46.6 48.0 49.2',
                            '44.1 45.3 46.7 48.2 49.4',
                            '44.3 45.4 46.9 48.3 49.5',
                            '44.4 45.6 47.0 48.5 49.7',
                            '44.6 45.7 47.2 48.6 49.8',
                            '44.7 45.9 47.3 48.8 49.9',
                            '44.8 46.0 47.5 48.9 50.1',
                            '44.9 46.1 47.6 49.0 50.2',
                            '45.1 46.3 47.7 49.2 50.3',
                            '45.2 46.4 47.8 49.3 50.5',
                            '45.3 46.5 47.9 49.4 50.6',
                            '45.4 46.6 48.0 49.5 50.7',
                            '45.5 46.7 48.1 49.6 50.8',
                            '45.6 46.8 48.2 49.7 50.9',
                            '45.7 46.9 48.3 49.8 51.0',
                            '45.8 47.0 48.4 49.9 51.1',
                            '45.9 47.0 48.5 50.0 51.2',
                            '45.9 47.1 48.6 50.1 51.3',
                            '46.0 47.2 48.7 50.1 51.3',
                            '46.1 47.3 48.7 50.2 51.4',
                            '46.2 47.4 48.8 50.3 51.5',
                            '46.2 47.4 48.9 50.4 51.6',
                            '46.3 47.5 49.0 50.4 51.6',
                            '46.4 47.6 49.0 50.5 51.7',
                            '46.4 47.6 49.1 50.6 51.8',
                            '46.5 47.7 49.2 50.6 51.8',
                            '46.5 47.7 49.2 50.7 51.9',
                            '46.6 47.8 49.3 50.7 51.9',
                            '46.7 47.9 49.3 50.8 52.0',
                            '46.7 47.9 49.4 50.9 52.1',
                            '46.8 48.0 49.4 50.9 52.1',
                            '46.8 48.0 49.5 51.0 52.2',
                            '46.9 48.1 49.5 51.0 52.2',
                            '46.9 48.1 49.6 51.1 52.3',
                            '47.0 48.2 49.6 51.1 52.3',
                            '47.0 48.2 49.7 51.2 52.4',
                            '47.1 48.3 49.7 51.2 52.4',
                            '47.1 48.3 49.8 51.3 52.5',
                            '47.2 48.4 49.8 51.3 52.5',
                            '47.2 48.4 49.9 51.4 52.6',
                            '47.2 48.4 49.9 51.4 52.6',
                        ]
                    },
                    'length':{
                        '13weeks':[
                            '45.6 47.2 49.1 51.1 52.7',
                            '46.8 48.4 50.3 52.3 53.9',
                            '47.9 49.5 51.5 53.5 55.1',
                            '48.8 50.5 52.5 54.5 56.1',
                            '49.7 51.4 53.4 55.4 57.0',
                            '50.5 52.2 54.2 56.3 57.9',
                            '51.3 53.0 55.1 57.1 58.8',
                            '52.1 53.8 55.8 57.9 59.6',
                            '52.8 54.5 56.6 58.7 60.4',
                            '53.4 55.2 57.3 59.4 61.1',
                            '54.1 55.8 57.9 60.1 61.8',
                            '54.7 56.4 58.6 60.7 62.5',
                            '55.3 57.0 59.2 61.4 63.1',
                            '55.8 57.6 59.8 62.0 63.7',
                        ],

                        '0to5years':[
                            '45.6 47.2 49.1 51.1 52.7',
                            '50.0 51.7 53.7 55.7 57.4',
                            '53.2 55.0 57.1 59.2 60.9',
                            '55.8 57.6 59.8 62.0 63.8',
                            '58.0 59.8 62.1 64.3 66.2',
                            '59.9 61.7 64.0 66.3 68.2',
                            '61.5 63.4 65.7 68.1 70.0',
                            '62.9 64.9 67.3 69.7 71.6',
                            '64.3 66.3 68.7 71.2 73.2',
                            '65.6 67.6 70.1 72.6 74.7',
                            '66.8 68.9 71.5 74.0 76.1',
                            '68.0 70.2 72.8 75.4 77.5',
                            '69.2 71.3 74.0 76.7 78.9',
                            '70.3 72.5 75.2 77.9 80.2',
                            '71.3 73.6 76.4 79.2 81.4',
                            '72.4 74.7 77.5 80.3 82.7',
                            '73.3 75.7 78.6 81.5 83.9',
                            '74.3 76.7 79.7 82.6 85.0',
                            '75.2 77.7 80.7 83.7 86.2',
                            '76.2 78.7 81.7 84.8 87.3',
                            '77.0 79.6 82.7 85.8 88.4',
                            '77.9 80.5 83.7 86.8 89.4',
                            '78.7 81.4 84.6 87.8 90.5',
                            '79.6 82.2 85.5 88.8 91.5',
                            '79.6 82.4 85.7 89.1 91.8',
                            '80.4 83.2 86.6 90.0 92.8',
                            '81.2 84.0 87.4 90.9 93.7',
                            '81.9 84.8 88.3 91.8 94.6',
                            '82.6 85.5 89.1 92.7 95.6',
                            '83.4 86.3 89.9 93.5 96.4',
                            '84.0 87.0 90.7 94.3 97.3',
                            '31 84.7 87.7 91.4 95.2 98.2',
                            '85.4 88.4 92.2 95.9 99.0',
                            '86.0 89.1 92.9 96.7 99.8',
                            '86.7 89.8 93.6 97.5 100.6',
                            '87.3 90.5 94.4 98.3 101.4',
                            '87.9 91.1 95.1 99.0 102.2',
                            '88.5 91.7 95.7 99.7 103.0',
                            '89.1 92.4 96.4 100.5 103.7',
                            '89.7 93.0 97.1 101.2 104.5',
                            '90.3 93.6 97.7 101.9 105.2',
                            '90.8 94.2 98.4 102.6 106.0',
                            '91.4 94.8 99.0 103.3 106.7',
                            '92.0 95.4 99.7 103.9 107.4',
                            '92.5 96.0 100.3 104.6 108.1',
                            '93.0 96.6 100.9 105.3 108.8',
                            '93.6 97.2 101.5 105.9 109.5',
                            '94.1 97.7 102.1 106.6 110.2',
                            '94.6 98.3 102.7 107.2 110.8',
                            '95.1 98.8 103.3 107.8 111.5',
                            '95.7 99.4 103.9 108.4 112.1',
                            '96.2 99.9 104.5 109.1 112.8',
                            '96.7 100.4 105.0 109.7 113.4',
                            '97.2 101.0 105.6 110.3 114.1',
                            '97.6 101.5 106.2 110.9 114.7',
                            '98.1 102.0 106.7 111.5 115.3',
                            '98.6 102.5 107.3 112.1 116.0',
                            '99.1 103.0 107.8 112.6 116.6',
                            '99.6 103.5 108.4 113.2 117.2',
                            '100.0 104.0 108.9 113.8 117.8',
                            '100.5 104.5 109.4 114.4 118.4'
                        ],

                        'to2years': [
                            '45.6 47.2 49.1 51.1 52.7',
                            '50.0 51.7 53.7 55.7 57.4',
                            '53.2 55.0 57.1 59.2 60.9',
                            '55.8 57.6 59.8 62.0 63.8',
                            '58.0 59.8 62.1 64.3 66.2',
                            '59.9 61.7 64.0 66.3 68.2',
                            '61.5 63.4 65.7 68.1 70.0',
                            '62.9 64.9 67.3 69.7 71.6',
                            '64.3 66.3 68.7 71.2 73.2',
                            '65.6 67.6 70.1 72.6 74.7',
                            '66.8 68.9 71.5 74.0 76.1',
                            '68.0 70.2 72.8 75.4 77.5',
                            '69.2 71.3 74.0 76.7 78.9',
                            '70.3 72.5 75.2 77.9 80.2',
                            '71.3 73.6 76.4 79.2 81.4',
                            '72.4 74.7 77.5 80.3 82.7',
                            '73.3 75.7 78.6 81.5 83.9',
                            '74.3 76.7 79.7 82.6 85.0',
                            '75.2 77.7 80.7 83.7 86.2',
                            '76.2 78.7 81.7 84.8 87.3',
                            '77.0 79.6 82.7 85.8 88.4',
                            '77.9 80.5 83.7 86.8 89.4',
                            '78.7 81.4 84.6 87.8 90.5',
                            '79.6 82.2 85.5 88.8 91.5',
                            '80.3 83.1 86.4 89.8 92.5'
                        ],

                        '2to5years':[
                            '79.6 82.4 85.7 89.1 91.8',
                            '80.4 83.2 86.6 90.0 92.8',
                            '81.2 84.0 87.4 90.9 93.7',
                            '81.9 84.8 88.3 91.8 94.6',
                            '82.6 85.5 89.1 92.7 95.6',
                            '83.4 86.3 89.9 93.5 96.4',
                            '84.0 87.0 90.7 94.3 97.3',
                            '31 84.7 87.7 91.4 95.2 98.2',
                            '85.4 88.4 92.2 95.9 99.0',
                            '86.0 89.1 92.9 96.7 99.8',
                            '86.7 89.8 93.6 97.5 100.6',
                            '87.3 90.5 94.4 98.3 101.4',
                            '87.9 91.1 95.1 99.0 102.2',
                            '88.5 91.7 95.7 99.7 103.0',
                            '89.1 92.4 96.4 100.5 103.7',
                            '89.7 93.0 97.1 101.2 104.5',
                            '90.3 93.6 97.7 101.9 105.2',
                            '90.8 94.2 98.4 102.6 106.0',
                            '91.4 94.8 99.0 103.3 106.7',
                            '92.0 95.4 99.7 103.9 107.4',
                            '92.5 96.0 100.3 104.6 108.1',
                            '93.0 96.6 100.9 105.3 108.8',
                            '93.6 97.2 101.5 105.9 109.5',
                            '94.1 97.7 102.1 106.6 110.2',
                            '94.6 98.3 102.7 107.2 110.8',
                            '95.1 98.8 103.3 107.8 111.5',
                            '95.7 99.4 103.9 108.4 112.1',
                            '96.2 99.9 104.5 109.1 112.8',
                            '96.7 100.4 105.0 109.7 113.4',
                            '97.2 101.0 105.6 110.3 114.1',
                            '97.6 101.5 106.2 110.9 114.7',
                            '98.1 102.0 106.7 111.5 115.3',
                            '98.6 102.5 107.3 112.1 116.0',
                            '99.1 103.0 107.8 112.6 116.6',
                            '99.6 103.5 108.4 113.2 117.2',
                            '100.0 104.0 108.9 113.8 117.8',
                            '100.5 104.5 109.4 114.4 118.4'
                        ]
                    },

                    'weight':{
                        '13weeks':[
                            '2.4 2.8 3.2 3.7 4.2',
                            '2.5 2.9 3.3 3.9 4.4',
                            '2.7 3.1 3.6 4.1 4.6',
                            '2.9 3.3 3.8 4.4 5.0',
                            '3.1 3.5 4.1 4.7 5.3',
                            '3.3 3.8 4.3 5.0 5.6',
                            '3.5 4.0 4.6 5.3 5.9',
                            '3.7 4.2 4.8 5.5 6.1',
                            '3.9 4.4 5.0 5.7 6.4',
                            '4.1 4.5 5.2 5.9 6.6',
                            '4.2 4.7 5.4 6.1 6.8',
                            '4.3 4.8 5.5 6.3 7.0',
                            '4.5 5.0 5.7 6.5 7.2',
                            '4.6 5.1 5.8 6.7 7.4',
                        ],
                        '0to5years':[
                            '2.4 2.8 3.2 3.7 4.2',
                            '3.2 3.6 4.2 4.8 5.4',
                            '4.0 4.5 5.1 5.9 6.5',
                            '4.6 5.1 5.8 6.7 7.4',
                            '5.1 5.6 6.4 7.3 8.1',
                            '5.5 6.1 6.9 7.8 8.7',
                            '5.8 6.4 7.3 8.3 9.2',
                            '6.1 6.7 7.6 8.7 9.6',
                            '6.3 7.0 7.9 9.0 10.0',
                            '6.6 7.3 8.2 9.3 10.4',
                            '6.8 7.5 8.5 9.6 10.7',
                            '7.0 7.7 8.7 9.9 11.0',
                            '7.1 7.9 8.9 10.2 11.3',
                            '7.3 8.1 9.2 10.4 11.6',
                            '7.5 8.3 9.4 10.7 11.9',
                            '7.7 8.5 9.6 10.9 12.2',
                            '7.8 8.7 9.8 11.2 12.5',
                            '8.0 8.8 10.0 11.4 12.7',
                            '8.2 9.0 10.2 11.6 13.0',
                            '8.3 9.2 10.4 11.9 13.3',
                            '8.5 9.4 10.6 12.1 13.5',
                            '8.7 9.6 10.9 12.4 13.8',
                            '8.8 9.8 11.1 12.6 14.1',
                            '9.0 9.9 11.3 12.8 14.3',
                            '9.2 10.1 11.5 13.1 14.6',
                            '9.3 10.3 11.7 13.3 14.9',
                            '9.5 10.5 11.9 13.6 15.2',
                            '9.6 10.7 12.1 13.8 15.4',
                            '9.8 10.8 12.3 14.0 15.7',
                            '10.0 11.0 12.5 14.3 16.0',
                            '10.1 11.2 12.7 14.5 16.2',
                            '10.3 11.3 12.9 14.7 16.5',
                            '10.4 11.5 13.1 15.0 16.8',
                            '10.5 11.7 13.3 15.2 17.0',
                            '10.7 11.8 13.5 15.4 17.3',
                            '10.8 12.0 13.7 15.7 17.6',
                            '11.0 12.1 13.9 15.9 17.8',
                            '11.1 12.3 14.0 16.1 18.1',
                            '11.2 12.5 14.2 16.3 18.4',
                            '11.4 12.6 14.4 16.6 18.6',
                            '11.5 12.8 14.6 16.8 18.9',
                            '11.6 12.9 14.8 17.0 19.2',
                            '11.8 13.1 15.0 17.3 19.5',
                            '11.9 13.2 15.2 17.5 19.7',
                            '12.0 13.4 15.3 17.7 20.0',
                            '12.1 13.5 15.5 17.9 20.3',
                            '12.3 13.7 15.7 18.2 20.6',
                            '12.4 13.8 15.9 18.4 20.8',
                            '12.5 14.0 16.1 18.6 21.1',
                            '12.6 14.1 16.3 18.9 21.4',
                            '12.8 14.3 16.4 19.1 21.7',
                            '12.9 14.4 16.6 19.3 22.0',
                            '13.0 14.5 16.8 19.5 22.2',
                            '13.1 14.7 17.0 19.8 22.5',
                            '13.2 14.8 17.2 20.0 22.8',
                            '13.4 15.0 17.3 20.2 23.1',
                            '13.5 15.1 17.5 20.4 23.3',
                            '13.6 15.3 17.7 20.7 23.6',
                            '13.7 15.4 17.9 20.9 23.9',
                            '13.8 15.5 18.0 21.1 24.2',
                            '14.0 15.7 18.2 21.3 24.4',
                        ]
                    }
                }
            }
        }


        function getFirstAndLastDay(date, dateType){
            var firstDay;
            var lastDay
            if(dateType == 'weekly') {
                 firstDay = moment(date).day(0);
                 lastDay = moment(date).day(6);
            } else {
                 firstDay = moment(date).date(1);
                 lastDay = moment(firstDay).endOf('month');
            }

            return{
                'firstDay': firstDay,
                'lastDay': lastDay
            }
        }

        /**
         * Change the fromDate and toDate, Sunday to Monday
         * @date - date
         * @dateType - weekly or monthly //true is weekly, false is monthly
         */
        function generateFromToDateText(date, dateType){
            var firstAndLastDay = getFirstAndLastDay(date, dateType)
            var from = moment(firstAndLastDay.firstDay).format("Do") + " " + moment(firstAndLastDay.firstDay).format("MMMM");
            var to = moment(firstAndLastDay.lastDay).format("Do") + " " + moment(firstAndLastDay.lastDay).format("MMMM");
            return from + " - " + to;
        }

        function createGrowthOptions() {
            return {
                chart: {
                    type: 'lineChart',
                    height: 200,
                    margin : {
                        top: 20,
                        right: 20,
                        bottom: 40,
                        left: 55
                    },
                    x: function(d){ return d.x; },
                    y: function(d){ return d.y; },
                    useInteractiveGuideline: true,
                    reduceXTicks: false,
                    reduceYTicks: false,
                    showControls: false,
                    showLegend: false,
                    valueFormat: function(d){
                        return d3.format(',.1f')(d);
                    },
                    dispatch: {
                        stateChange: function(e){ console.log("stateChange"); },
                        changeState: function(e){ console.log("changeState"); },
                        tooltipShow: function(e){ console.log("tooltipShow"); },
                        tooltipHide: function(e){ console.log("tooltipHide"); }
                    },
                    xAxis:{
                        tickFormat: function(d) {
                            var label = $scope.data[0].values[d].label;
                            return label;
                        }
                    }
                }
            };
        }

        /**
         * creates the options required by the plugin.
         */
        function createOptions(showXAxis, rightAlignYAxis, xTickValues, yTickValues, yAxisFormat, xAxisLabel, yAxisLabel) {
            return {
                chart: {
                    type: 'discreteBarChart',
                    height: 150,
                    margin : {
                        top: 20,
                        right: 20,
                        bottom: 60,
                        left: 55
                    },
                    x: function(d){return d.label;},
                    y: function(d){return d.value;},
                    showValues: false,
                    reduceXTicks: false,
                    reduceYTicks: false,
                    valueFormat: function(d){
                        return d3.format('.0f')(d);
                    },
                    transitionDuration: 500,
                    yAxis:{
                        showMaxMin: false,
                        tickValues: yTickValues,
                        tickFormat: function (d){
                            return d3.format(yAxisFormat)(d);
                        }
                    },
                    xAxis: {
                        tickValues: xTickValues,
                        axisLabel: xAxisLabel
                    },
                    showYAxis: true,
                    showXAxis: showXAxis,
                    showControls: false,
                    showLegend: false,
                    rightAlignYAxis: rightAlignYAxis
                }
            };
        }

        var activityTypeFiltersCalculation = {};
        activityTypeFiltersCalculation.sleep = function (dataActivityType) {
            var sleepHours = {};
            angular.forEach(dataActivityType, function(sleep, index){
                var startTimeKey = moment(sleep.time).format("MM-DD-YYYY");
                var valueDateStart = moment(sleep.time);
                var valueDateEnd = moment(sleep.sleep_timeend);
                var valueTimeDifference = moment.duration(valueDateEnd.diff(valueDateStart)).asHours();
                if(sleepHours[startTimeKey]){
                    sleepHours[startTimeKey].totalTop += valueTimeDifference; //
                    sleepHours[startTimeKey].totalBot += 1;
                }else{
                    sleepHours[startTimeKey] = {
                        'totalTop': valueTimeDifference,
                        'totalBot': 1
                    }
                }
            })
            return sleepHours;
        };
        activityTypeFiltersCalculation.diaper = function (dataActivityType) {
            var diaperWetDirty = {};
            angular.forEach(dataActivityType, function(diaper, index){
                var startTimeKey = moment(diaper.time).format("MM-DD-YYYY");
                var valueDateStart = moment.duration(diaper.time);
                if(diaper.type != "Empty"){
                    var wetOrDity = diaper.diaper_type == "Wet" ? "totalTop" : "totalBot"

                    if(diaperWetDirty[startTimeKey]){
                        var total = diaperWetDirty[startTimeKey][wetOrDity]
                        diaperWetDirty[startTimeKey][wetOrDity] = diaper.type == "Wet" ? total + 1 : total + 1;
                    }else{
                        diaperWetDirty[startTimeKey] = {'totalTop': 0, 'totalBot': 0};
                        diaperWetDirty[startTimeKey][wetOrDity] = diaper.type == "Wet" ? 1 : 1;
                    }
                }
            })
            return diaperWetDirty;
        }
        activityTypeFiltersCalculation.pump = function (dataActivityType) {
            var botTopTotalObj = {};
            angular.forEach(dataActivityType, function(entry, index){
                var startTimeKey = moment(entry.time).format("MM-DD-YYYY");
                var pumpSide = entry.pump_side;
                var pumpAmount = entry.pump_amount;

                if(!botTopTotalObj[startTimeKey]){
                    botTopTotalObj[startTimeKey] = {'totalTop': 0, 'totalBot': 0};
                }

                if(pumpSide == "both"){
                    botTopTotalObj[startTimeKey]['totalTop'] += pumpAmount;
                    botTopTotalObj[startTimeKey]['totalBot'] += pumpAmount;
                }else{
                    var topOrBot = pumpSide == 'left' ? 'totalTop' : 'totalBot';
                    botTopTotalObj[startTimeKey][topOrBot] += pumpAmount;
                }

            });

            return botTopTotalObj;
        };
        activityTypeFiltersCalculation.bottle = function (dataActivityType) {
            console.log(dataActivityType);
            var botTopTotalObj = {};
            angular.forEach(dataActivityType, function(entry, index){
                var startTimeKey = moment(entry.time).format("MM-DD-YYYY");

                if(entry.type == 'nurse' || (entry.type == 'bottle' && entry.bottle_type == 'formula'))
                    if(!botTopTotalObj[startTimeKey]){
                        botTopTotalObj[startTimeKey] = {'totalTop': 0, 'totalBot': 0};
                    }

                    if(entry.type == 'bottle'){
                        var bottleType = entry.bottle_type;
                        var bottleAmount = entry.bottle_amount;
                        if(bottleType == 'formula')
                            botTopTotalObj[startTimeKey]['totalTop'] += bottleAmount;
                    }else{
                        var nurseTimeLeft = angular.isUndefined(entry.nurse_timeleft) ? 0 : entry.nurse_timeleft;
                        var nurseTimeRight = angular.isUndefined(entry.nurse_timeright) ? 0 : entry.nurse_timeright;
                        var nurseTimeBoth = angular.isUndefined(entry.nurse_timeboth) ? 0 : entry.nurse_timeboth;
                        var nurseTotal = nurseTimeLeft + nurseTimeRight + nurseTimeBoth

                        botTopTotalObj[startTimeKey]['totalBot'] += nurseTotal;
                    }
            });

            return botTopTotalObj;
        };
        activityTypeFiltersCalculation.growth = function (dataActivityType) {
            console.log(dataActivityType);
            var botTopTotalObj = {};
            angular.forEach(dataActivityType, function(entry, index){
                var startTimeKey = moment(entry.time).format("MM-DD-YYYY");
                    if(!botTopTotalObj[startTimeKey]){
                        botTopTotalObj[startTimeKey] = {'weight': 0,
                            'height': 0,
                            'headCircumference': 0,
                            'bmi': 0
                        };
                    }

                    var growthHeadsize = entry.growth_headsize;
                    var growthHeight = entry.growth_height;
                    var growthWeight = entry.growth_weight / 1000;

                    var heightInMs = growthHeight / 10;
                    var bmi = parseFloat((growthWeight/(heightInMs * heightInMs)).toFixed(2)); //parseFloat(average.toFixed(2));

                    botTopTotalObj[startTimeKey]['weight'] = growthWeight;
                    botTopTotalObj[startTimeKey]['height'] = growthHeight;
                    botTopTotalObj[startTimeKey]['headCircumference'] = growthHeadsize;
                    botTopTotalObj[startTimeKey]['bmi'] = bmi;
            });

            return botTopTotalObj;
        };

        /**
         * Provides the data in the Average Section on trend, for calculating the average result of current week/month and last week/month.
         * @param date - current date
         * @param dataType - datatype to filter
         * @param dataActivityType - array containing the data of data type
         * @param periodType - weekly or monthly
         */
        function calculateAverageData(date, dataType, dataActivityType, periodType) {

            function getAverage(periodData) {
                var totalVal = 0;
                angular.forEach(periodData, function(dayValue, index){
                    totalVal =  totalVal + Math.abs(dayValue.value);
                });
                var average = totalVal / periodData.length;
                return parseFloat(average.toFixed(2));
            }

            var previousPeriodDate = moment(date).subtract(1, periodType == 'weekly' ? 'w' : 'M');
            var currentDateGenerateData = generateData(date, dataType, dataActivityType, periodType);
            var prevPeriodDateGenerateData = generateData(previousPeriodDate, dataType, dataActivityType, periodType);

            var topAverage = getAverage(currentDateGenerateData.top[0].values);

            return {
                'topAverage': getAverage(currentDateGenerateData.top[0].values),
                'topAverageLastPeriod': getAverage(prevPeriodDateGenerateData.top[0].values),
                'botAverage': getAverage(currentDateGenerateData.bot[0].values),
                'botAverageLastPeriod': getAverage(prevPeriodDateGenerateData.bot[0].values)
            }
        }

        /**
         * Function to get the right values from the WHO data.
         */
        /*
        function getWhoData(datePeriodFormatted, babyBorn, babyGender){

            var whoData = getWhoData();
        };
        */

        /**
         * Creates the required data for the plugin ** LINE GRAPH FORMAT GROWTH TREND**
         * @date - date to use to get the desired entries
         * @dataActivityType - array containing the activities
         * @periodType - weekly or monthly
         */
        function generateDataGrowth(date, dataType, dataActivityType, periodType, babyBorn, babyGender){

            function addActivity(datePeriodFormatted, xNumber, label){
                var weight = angular.isObject(sortedDataActivityType[datePeriodFormatted]) ? sortedDataActivityType[datePeriodFormatted].weight : 0;
                var height = angular.isObject(sortedDataActivityType[datePeriodFormatted]) ? sortedDataActivityType[datePeriodFormatted].height : 0;
                var headCircumference = angular.isObject(sortedDataActivityType[datePeriodFormatted]) ? sortedDataActivityType[datePeriodFormatted].headCircumference : 0;
                var bmi = angular.isObject(sortedDataActivityType[datePeriodFormatted]) ? sortedDataActivityType[datePeriodFormatted].bmi : 0;
                activityData.weight.baby.push({x: xNumber, y: weight, label:label, date: datePeriodFormatted});
                activityData.height.baby.push({x: xNumber, y: height, label:label, date: datePeriodFormatted});
                activityData.headCircumference.baby.push({x: xNumber, y: headCircumference, label:label, date: datePeriodFormatted});
                activityData.bmi.baby.push({x: xNumber, y: bmi, label:label, date: datePeriodFormatted});
            }

            var whoData = getWhoData();
            function addWhoActivity(datePeriodFormatted, xNumber){

                var babyBornMoment = moment(babyBorn)
                var currentMoment = moment();
                var currentBabyAgeInWeeks = Math.round(moment.duration(currentMoment.diff(babyBornMoment)).asDays() / 7);

                var monthDifference = moment(datePeriodFormatted);
                var babyAgeInMonths = Math.round(moment.duration(monthDifference.diff(babyBornMoment)).asMonths());
                var babyAgeInWeeks = Math.round(moment.duration(monthDifference.diff(babyBornMoment)).asDays() / 7);

                var whoArray = ['3rd', '15th', 'median', '85th', '97th'];
                var lengthWhoData, weightWhoData, headCircumferenceWhoData, bmiWhoData;

                if(babyAgeInWeeks >= 0){
                    if(currentBabyAgeInWeeks <= 13){
                         lengthWhoData = whoData[babyGender]['length']['13weeks'][babyAgeInWeeks].split(' ');
                         weightWhoData = whoData[babyGender]['weight']['13weeks'][babyAgeInWeeks].split(' ');
                         headCircumferenceWhoData = whoData[babyGender]['headCircumference']['13weeks'][babyAgeInWeeks].split(' ');
                         bmiWhoData = whoData[babyGender]['bmi']['13weeks'][babyAgeInWeeks].split(' ');
                    }else{
                         lengthWhoData = whoData[babyGender]['length']['0to5years'][babyAgeInMonths].split(' ');
                         weightWhoData = whoData[babyGender]['weight']['0to5years'][babyAgeInMonths].split(' ');
                         headCircumferenceWhoData = whoData[babyGender]['headCircumference']['0to5years'][babyAgeInMonths].split(' ');
                         bmiWhoData = whoData[babyGender]['bmi']['0to5years'][babyAgeInMonths].split(' ');
                    }
                    for(var x = 0; x <= 4; x++){
                        activityData.height[whoArray[x]].push({x: xNumber, y: parseFloat(lengthWhoData[x])});
                        activityData.weight[whoArray[x]].push({x: xNumber, y: parseFloat(weightWhoData[x])});
                        activityData.headCircumference[whoArray[x]].push({x: xNumber, y: parseFloat(headCircumferenceWhoData[x])});
                        activityData.bmi[whoArray[x]].push({x: xNumber, y: parseFloat(bmiWhoData[x])});
                    }
                }
                else{
                    for(var x = 0; x <= 4; x++){
                        activityData.height[whoArray[x]].push({x: xNumber, y: 0});
                        activityData.weight[whoArray[x]].push({x: xNumber, y: 0});
                        activityData.headCircumference[whoArray[x]].push({x: xNumber, y: 0});
                        activityData.bmi[whoArray[x]].push({x: xNumber, y: 0});
                    }
                }
            }

            var dataType = dataType;
            var sortedDataActivityType = activityTypeFiltersCalculation[dataType](dataActivityType);
            var activityData = {
                'weight':{
                    'baby': [],
                    '3rd': [],
                    '15th': [],
                    'median': [],
                    '85th': [],
                    '97th': []
                },
                'height':{
                    'baby': [],
                    '3rd': [],
                    '15th': [],
                    'median': [],
                    '85th': [],
                    '97th': []
                },
                'headCircumference': {
                    'baby': [],
                    '3rd': [],
                    '15th': [],
                    'median': [],
                    '85th': [],
                    '97th': []
                },
                'bmi': {
                    'baby': [],
                    '3rd': [],
                    '15th': [],
                    'median': [],
                    '85th': [],
                    '97th': []
                }
            };

            console.log(sortedDataActivityType);

            if(periodType == 'weekly'){
                //var labels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
                for(var x = 7; x >= 1; x--){
                    var datePeriod = moment(date).subtract(x, 'd');
                    var datePeriodFormatted = moment(datePeriod).format("MM-DD-YYYY");
                    var dateLabel = moment(datePeriod).format("ddd");
                    addActivity(datePeriodFormatted, 7-x, dateLabel);
                    addWhoActivity(datePeriodFormatted, 7-x)
                }
            }else if(periodType == 'monthly'){
                var firstDay = moment(date).date(1);
                var lastDay = moment(firstDay).endOf('month').date();
                for(var x = 1; x <= lastDay; x++){
                    var datePeriodFormatted = moment(date).day(x).format("MM-DD-YYYY");
                    var label = x;
                    addActivity(datePeriodFormatted, x-1, label);
                    addWhoActivity(datePeriodFormatted, x-1);
                }
            }else if(periodType == '3month'){
                var firstDateOfCurrentMonth = moment(date).set('date', 1);
                var done = false
                var twoMonthsAgo = moment(firstDateOfCurrentMonth).subtract(1, 'M');
                var threeMonthsAgo = moment(firstDateOfCurrentMonth).subtract(2, 'M');

                var arrayWeek = [7, 14, 21, 28];
                var arrayMonths = [threeMonthsAgo, twoMonthsAgo, firstDateOfCurrentMonth];
                var indexX = 0;

                angular.forEach(arrayMonths, function(month, index){
                   angular.forEach(arrayWeek, function(week, index2){
                       var date = moment(month).add(week, 'd');
                       var done = false;
                       var subtractVal = 0;
                       while(!done){
                           date = moment(date).subtract(1, 'd');
                           var datePeriodFormatted = moment(date).format("MM-DD-YYYY");
                           var dateLabel;
                           var monthLabel = moment(date).format("MMM");

                           switch(index2) {
                               case 0:
                                   dateLabel = monthLabel + " " + '1st';
                                   break;
                               case 1:
                                   dateLabel = '2nd';
                                   break;
                               case 2:
                                   dateLabel = '3rd';
                                   break;
                               case 3:
                                   dateLabel = '4th';
                                   break;
                           }

                           if(angular.isObject(sortedDataActivityType[datePeriodFormatted]) || subtractVal == 6){
                               done = true;
                               addActivity(datePeriodFormatted, indexX, dateLabel);
                               addWhoActivity(datePeriodFormatted, indexX);
                               indexX++;
                           }

                           subtractVal++;
                       }
                   })
                });
            }else if(periodType == 'all'){

                    var babyBornMoment = moment(babyBorn)
                    var currentMoment = moment();
                    var valueMonthsDifference = parseInt(moment.duration(currentMoment.diff(babyBornMoment)).asMonths());
                    var valueWeeksDifference = parseInt(moment.duration(currentMoment.diff(babyBornMoment)).asDays() / 7);
                    var indexX = 0;

                    if(valueWeeksDifference > 13){
                        for(x = 0; x <= valueMonthsDifference; x++){
                            var toDate = moment(babyBorn).add(x+1, 'M');
                            var fromDate = moment(toDate).subtract(1, 'M');
                            var fromDateSubtractedFormatted = moment(fromDate).format("MM-DD-YYYY");
                            var done = false;

                            while(!done){
                                var toDateSubtractedFormatted = moment(toDate).format("MM-DD-YYYY");
                                if(angular.isObject(sortedDataActivityType[toDateSubtractedFormatted]) || toDateSubtractedFormatted == fromDateSubtractedFormatted){
                                    done = true;
                                    addActivity(toDateSubtractedFormatted, indexX, x);
                                    addWhoActivity(toDateSubtractedFormatted, indexX);
                                    indexX++;
                                }
                                toDate = moment(toDate).subtract(1, 'd');
                            }


                        }
                    }else{
                        for(x = 0; x <= 13; x++){

                            var addVal = 7*x;
                            var fromDate =  moment(babyBorn).add(addVal, 'd');
                            var toDate = moment(fromDate).add(7, 'd'); //
                            var fromDateSubtractedFormatted = moment(fromDate).format("MM-DD-YYYY");
                            var done = false;

                            while(!done){

                                var toDateSubtractedFormatted = moment(toDate).format("MM-DD-YYYY");
                                if(angular.isObject(sortedDataActivityType[toDateSubtractedFormatted]) || toDateSubtractedFormatted == fromDateSubtractedFormatted){
                                    done = true;
                                    addActivity(toDateSubtractedFormatted, indexX, x);
                                    addWhoActivity(fromDateSubtractedFormatted, indexX);
                                    indexX++;
                                }
                                toDate = moment(toDate).subtract(1, 'd');
                            }
                        }

                    }
            }

            console.log(activityData);
            return activityData;
        }

        /**
         * Creates the required data for the plugin
         * @date - date to use to get the desired entries
         * @dataActivityType - array containing the activities
         * @periodType - weekly or monthly
         */
        function generateData(date, dataType, dataActivityType, periodType){

            var acitivityDataValuesTop = [];
            var acitivityDataValuesBot = [];
            var dataType = dataType;
            var sortedDataActivityType = activityTypeFiltersCalculation[dataType](dataActivityType);

            console.log(sortedDataActivityType);

            if(periodType == 'weekly'){
                var labels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
                for(var x = 0; x <= 6; x++){
                    var datePeriodFormatted = moment(date).day(x).format("MM-DD-YYYY");
                    var totalValueTop = angular.isObject(sortedDataActivityType[datePeriodFormatted]) ? sortedDataActivityType[datePeriodFormatted].totalTop : 0;
                    var totalValueBot = angular.isObject(sortedDataActivityType[datePeriodFormatted]) ? sortedDataActivityType[datePeriodFormatted].totalBot : 0;
                    acitivityDataValuesTop.push({
                        "label":  labels[x],
                        "value": totalValueTop
                    });
                    acitivityDataValuesBot.push({
                        "label":  labels[x],
                        "value": totalValueBot
                    });
                }
            }else{
                var firstDay = moment(date).date(1);
                var lastDay = moment(firstDay).endOf('month').date();
                for(var x = 1; x <= lastDay; x++){
                    var datePeriodFormatted = moment(date).day(x).format("MM-DD-YYYY");
                    var label = x;
                    var totalValueTop = angular.isObject(sortedDataActivityType[datePeriodFormatted]) ? sortedDataActivityType[datePeriodFormatted].totalTop : 0;
                    var totalValueBot = angular.isObject(sortedDataActivityType[datePeriodFormatted]) ? sortedDataActivityType[datePeriodFormatted].totalBot : 0;
                    acitivityDataValuesTop.push({
                        "label":  label,
                        "value": totalValueTop
                    });
                    acitivityDataValuesBot.push({
                        "label": label,
                        "value": totalValueBot
                    });
                }
            }
            acitivityDataValuesBot.reverse();
            return {
                'top': [{
                    'key': "Top",
                    'values': acitivityDataValuesTop
                }],
                'bot': [{
                    'key': "Bot",
                    'values': acitivityDataValuesBot
                }]
            }
        }

        /**
         * Generates the average details info displayed below of the graph
         */
        function generateAverageInfo(){

        }

        return{
            generateData: generateData,
            createOptions: createOptions,
            createGrowthOptions: createGrowthOptions,
            generateFromToDateText: generateFromToDateText,
            getFirstAndLastDay: getFirstAndLastDay,
            calculateAverageData: calculateAverageData,
            generateDataGrowth: generateDataGrowth
        }
    }]);